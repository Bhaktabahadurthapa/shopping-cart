pipeline {
  agent any 
    tools {
      maven 'maven3'
    }
  environment {
    DOCKER_IMAGE = "lishan2023/shoppingcard:${BUILD_NUMBER}"
  }
 stage('compile') {
      steps {     
        sh 'mvn compile'
      }
    }
stage('test') {
      steps {     
        sh 'mvn test'
      }
    }
stage('build') {
      steps {     
        sh 'mvn package'
      }
    }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/bhaktabahadurthapa/'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://16.16.67.133:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "lishan2023/shoppingcard:${BUILD_NUMBER}"
    
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Install Trivy') {
      steps {
        script {
          // Check if Trivy is installed
          def trivyInstalled = sh(script: 'command -v trivy', returnStatus: true) == 0

          // If Trivy is not installed, install it
          if (!trivyInstalled) {
            sh '''
              apt-get update && apt-get install -y wget
              wget -qO- https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            '''
          }
        }
      }
    }
    stage('Trivy Scan') {
            steps {
                script {
                    // Run Trivy image scan
                    sh 'trivy image --format table lishan2023/shoppingcard:${BUILD_NUMBER}'
                }
            }
        }

    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "shoppingcard"
            GIT_USER_NAME = "bhaktabahadurthapa"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "bhaktathapamgr5@gmail.com"
                    git config user.name "bhaktabahadurthapa"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" kubernetes manifest files/deployment.yml
                    git add kubernetes manifest files/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}