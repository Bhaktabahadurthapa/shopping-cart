pipeline {
    agent any
    tools {
        maven 'maven3'
    }
    environment {
        DOCKER_IMAGE = "your-docker-repo/your-image-name:${env.BUILD_NUMBER}"
        SONAR_URL = "http://16.16.67.133:9000"
        GIT_REPO_NAME = "shoppingcard"
        GIT_USER_NAME = "bhaktabahadurthapa"
    }
    stages {
        stage('compile') {
            steps {
                script {
                    // Set permissions for application.properties
                    sh 'chmod 644 /var/lib/jenkins/workspace/project/target/classes/application.properties'
                    sh 'mvn compile'
                }
            }
        }
        stage('test') {
            steps {
                script {
                    // Set permissions for application.properties
                    sh 'chmod 644 /var/lib/jenkins/workspace/project/target/classes/application.properties'
                    sh 'mvn test'
                }
            }
        }
        stage('build') {
            steps {
                script {
                    // Set permissions for application.properties
                    sh 'chmod 644 /var/lib/jenkins/workspace/project/target/classes/application.properties'
                    sh 'mvn package'
                }
            }
        }
        stage('Checkout') {
            steps {
                sh 'echo passed'
                // git branch: 'main', url: 'https://github.com/bhaktabahadurthapa/'
            }
        }
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Install Trivy') {
            steps {
                script {
                    def trivyInstalled = sh(script: 'command -v trivy', returnStatus: true) == 0
                    if (!trivyInstalled) {
                        sh '''
                            apt-get update && apt-get install -y wget
                            wget -qO- https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                        '''
                    }
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                script {
                    sh 'trivy image --format table ${DOCKER_IMAGE}'
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "bhaktathapamgr5@gmail.com"
                        git config user.name "bhaktabahadurthapa"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" kubernetes/manifest/files/deployment.yml
                        git add kubernetes/manifest/files/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
